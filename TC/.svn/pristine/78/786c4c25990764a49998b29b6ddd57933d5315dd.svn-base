#include "QuoteItem.h"
#include "PriceItem.h"
#include "TradeUnit.h"
#include "OrderItem.h"
#include "Dispatcher.h"
#include "SPTrader.h"
#include "ComboTrader.h"
#include "TradeCube.h"

int traderId = 1;
const char *PROGRAM_NAME="TradeCube";

void testComboTrader() 
{
	Dispatcher* disp = new Dispatcher();

	ComboTrader* cmb_trader =  new ComboTrader(traderId++);
	cmb_trader->setDispatcher(disp);
	DWORD tbtid = cmb_trader->startTraderThread();  // 交易线程启动，等待消息

	QuoteItem* qi1 = new QuoteItem();
	qi1->setTradePlatform(SPTRADER);
	qi1->setQuoteId("NQU3");
	qi1->setExchange("CBOT");
	qi1->setMinContractQty(1);
	qi1->setPriceScale(1);	
	TradeUnit* tu1 = new TradeUnit(qi1);

	// 在这里会添加品种，进而开启价格线程和订单线程
	cmb_trader->addTradeUnit(tu1);

	disp->addPriceThreadId(qi1->getTradePlatform(), qi1->getQuoteId(),tbtid);

	disp->addOrderThreadId(cmb_trader->getTraderId(), tbtid);
	//Todo: add ui thread id

	QuoteItem* qi2 = new QuoteItem();
	qi2->setTradePlatform(SPTRADER);
	qi2->setQuoteId("YMU3");
	qi2->setExchange("CBOT");
	qi2->setMinContractQty(1);
	qi2->setPriceScale(1);
	TradeUnit* tu2 =  new TradeUnit(qi2);
	cmb_trader->addTradeUnit(tu2);

	disp->addPriceThreadId(qi2->getTradePlatform(), qi2->getQuoteId(),tbtid);

	cmb_trader->setOptimizeOrderFlow(NO_OPTIMIZE_OFP);
	//cmb_trader->setOptimizeOrderFlow(OPTIMIZE_OFP);

	int quoteNO[2] = {1,2};
	double qty[2] = {1,1};
	char buysell[2]={'B', 'S'};
	int rankId[2]={1,2};

	// 在这里创建orderunit 
	cmb_trader->createOrderTemplate(2,quoteNO,qty,buysell,rankId);

	//cmb_trader->setSpread(2700);
	cmb_trader->setIntraBarTrading(true);
	//cmb_trader->setIntraBarTrading(false);
	//cmb_trader->setStrategy(stgy);
	Sleep(10);// Check price data is more than maxRefBarNum
	cmb_trader->turnOnStrategy();
	
	Sleep(10000000);
}
void main()
{
	testComboTrader();
}